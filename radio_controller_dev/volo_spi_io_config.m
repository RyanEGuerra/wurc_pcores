
function volo_spi_io_config(this_block)

  % Revision History:
  %
  %   26-Apr-2013  (17:12 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     E:\naren\volo_radio_bridge_SPLIT\volo_spi_io.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('volo_spi_io');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('reset');
  this_block.addSimulinkInport('go');
%   this_block.addSimulinkInport('clkdiv');
  this_block.addSimulinkInport('tx_data');
  this_block.addSimulinkInport('spi_miso1');
%   this_block.addSimulinkInport('spi_miso2');
%   this_block.addSimulinkInport('spi_miso3');
%   this_block.addSimulinkInport('spi_miso4');

  this_block.addSimulinkOutport('rx_data1');
%   this_block.addSimulinkOutport('rx_data2');
%   this_block.addSimulinkOutport('rx_data3');
%   this_block.addSimulinkOutport('rx_data4');
  this_block.addSimulinkOutport('done');
  this_block.addSimulinkOutport('curbitnum');
  this_block.addSimulinkOutport('spi_mosi');
  this_block.addSimulinkOutport('spi_cs');
  this_block.addSimulinkOutport('spi_sclk');

  rx_data1_port = this_block.port('rx_data1');
  rx_data1_port.setType('UFix_32_0');
%   rx_data2_port = this_block.port('rx_data2');
%   rx_data2_port.setType('UFix_32_0');
%   rx_data3_port = this_block.port('rx_data3');
%   rx_data3_port.setType('UFix_32_0');
%   rx_data4_port = this_block.port('rx_data4');
%   rx_data4_port.setType('UFix_32_0');
  done_port = this_block.port('done');
  done_port.setType('UFix_1_0');
  done_port.useHDLVector(false);
  curbitnum_port = this_block.port('curbitnum');
  curbitnum_port.setType('UFix_5_0');
  spi_mosi_port = this_block.port('spi_mosi');
  spi_mosi_port.setType('UFix_1_0');
  spi_mosi_port.useHDLVector(false);
  spi_cs_port = this_block.port('spi_cs');
  spi_cs_port.setType('UFix_1_0');
  spi_cs_port.useHDLVector(false);
  spi_sclk_port = this_block.port('spi_sclk');
  spi_sclk_port.setType('UFix_1_0');
  spi_sclk_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('reset').width ~= 1);
      this_block.setError('Input data type for port "reset" must have width=1.');
    end

    this_block.port('reset').useHDLVector(false);

    if (this_block.port('go').width ~= 1);
      this_block.setError('Input data type for port "go" must have width=1.');
    end

    this_block.port('go').useHDLVector(false);

%     if (this_block.port('clkdiv').width ~= 3);
%       this_block.setError('Input data type for port "clkdiv" must have width=3.');
%     end

    if (this_block.port('tx_data').width ~= 32);
      this_block.setError('Input data type for port "tx_data" must have width=32.');
    end

    if (this_block.port('spi_miso1').width ~= 1);
      this_block.setError('Input data type for port "spi_miso1" must have width=1.');
    end

    this_block.port('spi_miso1').useHDLVector(false);

%     if (this_block.port('spi_miso2').width ~= 1);
%       this_block.setError('Input data type for port "spi_miso2" must have width=1.');
%     end
% 
%     this_block.port('spi_miso2').useHDLVector(false);
% 
%     if (this_block.port('spi_miso3').width ~= 1);
%       this_block.setError('Input data type for port "spi_miso3" must have width=1.');
%     end
% 
%     this_block.port('spi_miso3').useHDLVector(false);
% 
%     if (this_block.port('spi_miso4').width ~= 1);
%       this_block.setError('Input data type for port "spi_miso4" must have width=1.');
%     end
% 
%     this_block.port('spi_miso4').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'sys_clk','sys_ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('SPI_XFER_LEN','integer','16');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');_
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('volo_spi_io.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

